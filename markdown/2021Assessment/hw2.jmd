# Homework \#2 - Semester 2, 2022.
(last edit: July 2, 2022)

UNDER CONSTRUCTION

**Due:** 

**Note:** 

**Weights and marking criteria:** 

**Submission format:** This assignment should be submitted via a GitHub Repo and a PDF file via Blackboard. 

Specific instructions for the GitHub repo are below. It is important that the GitHub repo be made **private** and the course user name `uqMATH2504` be invited as a collaborator. It is also important to name the repo exactly as `<<FIRST NAME>>-<<LAST NAME>>-2504-2021-HW2`. So for example if your name is "Jeannette Young", the repo name should be `Jeannette-Young-2504-2021-HW2`.

The PDF file should be a nice formatted file that has:

* Your name, student number, and assignment title (HW2 - 2021) on the top.
* A (clickable) link to your GitHub repo.
* The code and output should be presented sequentially for each question. I.e. question 1's code and output, followed by question 2's code and output, etc... 

The recommended way to make the PDF file is via a Jupyter notebook where you copy in some code and output into the notebook, and in certain cases use `include()` to run Julia code if appropriate. You also comment on questions in this PDF (e.g. when asked to answer things not via code). If desired you could keep this jupyter notebook (`.ipynb` file) in the repo. However, this Jupyter notebook will not be checked (only the PDF file), and it isn't required to be a "runnable" notebook. In any case, please avoid pixilated screenshots of code, so for example if you choose to format your PDF file in MS-word (instead of Jupyter), make sure the code is clean, formatted, and readable. 

Marking responses will be made by the teaching staff by annotating **selected parts** of your PDF file via blackboard. Hence a very readable and clean PDF file is important. Note that in printing Jupyter to PDF (or exporting to PDF) there may sometimes be excessive white space. Do not worry about this extra white space; it is not a problem.

**Individual work**: This is an individual work assignment. Plagiarism will not be accepted. Nevertheless, feel free to consult with friends or classmates via Piazza and other means about how to go about certain tasks.

**Marking Criteria**: 

* 10 points are allocated for following instructions. 

* 10 points are allocated for setting up the GitHub hand-in according to the instructions.

* Each question is then marked based on correctness.

* As this is the second assignment, points **will be** deducted for sloppy coding style. Make sure to have your code properly indented, to use sensible and consistent variable names, and to write code that is in general clean and consistent. 

---

## Setting up your GitHub repo for hand-in (10pts):

* Create your GitHub account if you don't have one. 
* Create a new repo for this assignment. Name the repo exactly as `<<FIRST NAME>>-<<LAST NAME>>-2504-2021-HW2`. So for example if your name is "Jeannette Young", the repo name should be `Jeannette-Young-2504-2021-HW2`.
* Make sure the repo is **private**.
* Invite the course GitHub user, `uqMATH2504` as a collaborator. You may do so early on while working on the assignment, and must do this no later than the assignment due date.
* Do **not** make any changes (commits) to the repo after the assignment due date. 
* Create a local clone of the repo. It is recommended that use use `git` command line via the shell to work on making changes/additions to the assignment and submitting the changes. However you are free to use any other mechanism (VS-Code, GitHub desktop, etc).
* If for some reason you are not able or willing ot use GitHub an alternative is GitLab. This is not recommended as it adds additional work to the teaching staff, however if you wish to use GitLab instead of GitHub contact the teaching staff for permission.

Your GitHub repo should be formatted as exactly as follows:
* Have a `README.md` file which states your name, the assignment title, and has a (clickable) link to the assignment instructions on the course website (to this document). 
* Have a `LICENSE.md` file. Choose a license as you wish (for example the MIT license). However keep in mind that you must keep the submission private until the end of the semester.
* Have a `.gitignore` file. 
* Have a `src` directory and in it have 6 additional directories named `q1`, `q2`,...,`q6`. In each such directory (except for `q1`). Have a single Julia source file named `q<<X>>_solution.jl` where `<<X>>` is one of (`2`,`3`,...,`6`). This file should be runnable via `julia q<<X>>_solution.jl`. So for example if the teaching staff downloads your submission repo. It can run from the main repo directory:
```
julia src/q3/q3_solution.jl
```
and this will produce your output for question 3. 
* Have an `other` directory where you can place the animation you create for Q5, and if you wish any other auxillary material.

Note that question 1 is clearly different as it requires you to show evidence of using a few unix commands. For this question just have `q1_solution.txt` as a file in `src/q1/`.

In the future projects you will also need to worry about a `Project.toml` and `Manifest.toml` file in the repo so that your assignment describes the packages you used. However in this assignment you do not need to worry about that.

* Note: make sure that there aren't any files in your submission repo except for those mentioned above (with the exception of perhaps a Jupyter `.ipynb` file if you choose to use it for creating the PDF). Use may use the `.gitignore` file to ensure `git` does not commit additional files and output files to your `repo`.

## Question 1 (10pts): A few unix commands

In this question you will manipulate a few files via Unix command line. If you are using Windows, it is best you do it via GitBash. If you are using Linux or Mac, just use the shell. For the question create a folder `hw2_q1` and make sure that `hw2_q1` is your working directory in the terminal/shell/command-line via `cd`. You will then use the commands `ls`, `pwd`, `cd`, `cp`, `mv`, `rm` (be careful with `rm`), `cat`, and `echo`. You'll also use output redirection to file (`>`).

Your submission should be comprised of the text from the shell including the commands you used and the outputs. Just get it by copying the shell text and pasting in a file.

**1a**: Create the folder `hw2_q1` and make that your working directory in the shell. Illustrate this via `pwd`.

**1b**: Display your name to the terminal using the `echo` command.

**1c**: Repeat and use output redirection (`>`) to send the output of the echo command to a file `my_name.txt`.

**1d**: Display the contents of the file using the `cat` command.

**1e**: Inspect the length of the file using `ls`. Make sure to use a flag for `ls` so as to see the number of bytes in the file.

**1f**: Create a duplicate of the file to another file called `my_name2.txt` using the `cp` command.

**1g**: Create a folder named `people` using the `mkdir` command.

**1h**: Move `my_name2.txt` into `people`, where the file name will be `<<YOUR-NAME>>.txt` with `<<YOUR-NAME>>` being your first and last name without white space using `_`. For this use the `mv` command.

**1i**: Using the same thing you did in **1c**, create three additional files of peoples names in the folder `people`.

**1g**: Change directory into `people`. Now Use `mv` to move one of the people files back into `hw2_q1`. Use `..` (double dot).

**1k**: Move another file back into `hw2_q1`, but now use an absolute path to describe the destination folder.

**1l**: Copy one of the files in people into a file name starting with `.` (single dot as prefix). For example if the file name was `marie_curie.txt`, copy it into `.marie_curie.txt`. 

**1m**: Show all the files in the directory (also showing `.marie_curie.txt`), where you also see the size of the files and other information. Use the correct flag(s) for `ls` to show hidden files.

**1n**: Delete all the files in the directory using a single command. Please be very careful when deleting files! 

**1o**: Move back to `hw1_q1` and delete the directory `people`. Use either `rm` with a correct flag or `rmdir`.

